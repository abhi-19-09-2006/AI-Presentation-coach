import streamlit as st
try:
    from audiorecorder import audiorecorder
except Exception:
    audiorecorder = None
try:
    from pydub import AudioSegment
except Exception:
    AudioSegment = None
import io
import os
from speech_to_text import transcribe_audio
from text_analysis_module import analyze_text
import plotly.graph_objects as go
import numpy as np
import time
try:
    from reportlab.lib.pagesizes import letter
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
    from reportlab.lib.styles import getSampleStyleSheet
    from reportlab.lib import colors
    REPORTLAB_AVAILABLE = True
except Exception:
    REPORTLAB_AVAILABLE = False
import json
from datetime import datetime
import pandas as pd
try:
    from optimization_utils import (
        memory_optimizer, performance_profiler, resource_monitor,
        optimize_for_production, get_system_performance,
        optimized_audio_processing
    )
    OPTIMIZATION_AVAILABLE = True
    optimize_for_production()
except ImportError:
    OPTIMIZATION_AVAILABLE = False
    class MockOptimizer:
        def get_memory_stats(self): return {'hit_rate': 0}
        def cleanup_memory(self): return True
    
    class MockResourceMonitor:
        def check_resources(self): return []
    
    memory_optimizer = MockOptimizer()
    resource_monitor = MockResourceMonitor()
    
    def get_system_performance():
        return {'system_healthy': True, 'cpu_percent': 0, 'memory_percent': 0}
try:
    from privacy_manager import (
        privacy_manager, secure_audio_processor,
        get_privacy_status, immediate_privacy_cleanup
    )
    PRIVACY_PROTECTION_AVAILABLE = True
except ImportError:
    PRIVACY_PROTECTION_AVAILABLE = False
    class MockPrivacyManager:
        def get_privacy_report(self): return {'compliance_status': 'MOCK'}
        def immediate_cleanup_all(self): return True
        def get_detailed_privacy_log(self, n=20): return []
        def export_privacy_report(self, path): return False
    
    class MockSecureProcessor:
        def process_audio_securely(self, audio, fmt): return "temp_fallback.wav", None
        def cleanup_audio_file(self, file_id): return True
    
    privacy_manager = MockPrivacyManager()
    secure_audio_processor = MockSecureProcessor()
    
    def get_privacy_status():
        return {'compliance_status': 'DISABLED', 'message': 'Privacy protection not available'}
    
    def immediate_privacy_cleanup():
        return True

# Real-time multimodal analysis import
try:
    from realtime_analysis import create_realtime_dashboard
    REALTIME_ANALYSIS_AVAILABLE = True
except ImportError as e:
    REALTIME_ANALYSIS_AVAILABLE = False
    def create_realtime_dashboard():
        pass

# Performance Monitor Class
class PerformanceMonitor:
    """Performance monitoring for the AI Coach application"""
    
    def __init__(self):
        self.metrics = {
            'page_loads': 0,
            'analysis_runs': 0,
            'cache_hits': 0,
            'cache_misses': 0,
            'avg_analysis_time': 0.0,
            'memory_usage': 0.0
        }
        self.metrics['page_loads'] += 1
    
    def track_analysis_start(self):
        """Track when analysis starts"""
        self.metrics['analysis_runs'] += 1
        return time.time()
    
    def track_analysis_end(self, start_time):
        """Track when analysis ends and calculate performance"""
        duration = time.time() - start_time
        self.metrics['avg_analysis_time'] = (
            (self.metrics['avg_analysis_time'] * (self.metrics['analysis_runs'] - 1) + duration) / 
            self.metrics['analysis_runs']
        )
        return duration
    
    def get_performance_badge(self):
        """Get current performance status badge"""
        if self.metrics['avg_analysis_time'] < 2.0:
            return "🟢 Optimal", "performance-badge"
        elif self.metrics['avg_analysis_time'] < 5.0:
            return "🟡 Good", "performance-badge warning"
        else:
            return "🔴 Slow", "performance-badge error"
    
    def get_cache_efficiency(self):
        """Calculate cache hit rate"""
        total_requests = self.metrics['cache_hits'] + self.metrics['cache_misses']
        if total_requests == 0:
            return 100.0
        return (self.metrics['cache_hits'] / total_requests) * 100

# PAGE CONFIG
st.set_page_config(
    page_title="AI Coach - Professional Voice Analysis",
    page_icon="🚀",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': None,
        'Report a bug': None,
        'About': "AI Coach - Professional Voice Analysis Platform"
    }
)

# Initialize performance monitor immediately after page config
if 'perf_monitor' not in st.session_state:
    st.session_state.perf_monitor = PerformanceMonitor()

# Performance optimization: Cache session state initialization
@st.cache_data
def get_default_preferences():
    return {
        "focus_area": "General Communication",
        "analysis_depth": "Standard",
        "coaching_style": "Encouraging"
    }

# Initialize session state for advanced features with optimized defaults
if "performance_history" not in st.session_state:
    st.session_state.performance_history = []
if "analysis_count" not in st.session_state:
    st.session_state.analysis_count = 0
if "best_score" not in st.session_state:
    st.session_state.best_score = 0
if "user_preferences" not in st.session_state:
    st.session_state.user_preferences = get_default_preferences()
if "advanced_mode" not in st.session_state:
    st.session_state.advanced_mode = False
if "real_time_dashboard" not in st.session_state:
    st.session_state.real_time_dashboard = False
if "show_clear_confirmation" not in st.session_state:
    st.session_state.show_clear_confirmation = False
if "audio_recorded" not in st.session_state:
    st.session_state.audio_recorded = None

# Performance optimization: Cache heavy computations
@st.cache_data(ttl=300)  # Cache for 5 minutes
def get_theme_configuration(theme_name):
    """Cache theme configurations for better performance"""
    return {
        "css_loaded": True,
        "theme_name": theme_name,
        "cache_timestamp": time.time()
    }

# Performance optimization: Memoize expensive operations
@st.cache_data
def generate_static_content():
    """Generate and cache static content that doesn't change"""
    return {
        "theme_descriptions": {
            "Dark Professional": "🌙 Professional dark mode for extended use",
            "Light Professional": "☀️ Clean light theme for presentations",
            "Ocean Breeze": "🌊 Calming blue gradients for focus",
            "Sunset Glow": "🌅 Warm orange and pink tones",
            "Forest Calm": "🌲 Natural green themes for tranquility",
            "Purple Dreams": "💜 Elegant purple gradients",
            "Midnight Blue": "🌌 Deep blue professional theme",
            "Rose Gold": "🌹 Sophisticated rose and gold accents"
        },
        "theme_previews": {
            "🌙 Dark Professional": "#0f1419",
            "☀️ Light Professional": "#f8fafc", 
            "🌊 Ocean Breeze": "#0ea5e9",
            "🌅 Sunset Glow": "#ff6b6b",
            "🌲 Forest Calm": "#16a085",
            "💜 Purple Dreams": "#8e44ad",
            "🌌 Midnight Blue": "#1a237e",
            "🌹 Rose Gold": "#e91e63"
        }
    }

# ---------------------------
# SIDEBAR: THEME + SETTINGS
# ---------------------------
with st.sidebar:
    st.title("⚙ Appearance")
    
    # Enhanced Theme selection with modern options
    theme = st.selectbox(
        "🌗 Theme", 
        [
            "Dark Professional",
            "Light Professional", 
            "Ocean Breeze",
            "Sunset Glow",
            "Forest Calm",
            "Purple Dreams",
            "Midnight Blue",
            "Rose Gold"
        ], 
        index=0
    )
    
    accent_color = st.color_picker("🎨 Accent Color", "#4F46E5")
    density = st.select_slider("Spacing", options=["Compact", "Cozy", "Comfy"], value="Cozy")
    
    # Theme preview section
    st.markdown("---")
    st.markdown("**🎨 Theme Preview**")
    st.markdown(f"**Current:** {theme}")
    
    # Theme descriptions with cached content
    static_content = generate_static_content()
    theme_descriptions = static_content["theme_descriptions"]
    theme_previews = static_content["theme_previews"]
    
    st.caption(theme_descriptions.get(theme, "Custom theme selected"))
    
    # Theme showcase
    if st.checkbox("🎆 Show Theme Gallery", help="Preview all available themes"):
        st.markdown("**Available Themes:**")
        theme_previews = static_content["theme_previews"]
        
        cols = st.columns(4)
        for i, (theme_name, color) in enumerate(theme_previews.items()):
            with cols[i % 4]:
                st.markdown(f"""
                    <div style="
                        background: {color}; 
                        height: 30px; 
                        border-radius: 8px; 
                        margin: 4px 0;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        color: white;
                        font-size: 10px;
                        font-weight: bold;
                        text-shadow: 0 1px 2px rgba(0,0,0,0.5);
                    ">{theme_name.split(' ')[1] if len(theme_name.split(' ')) > 1 else theme_name}</div>
                """, unsafe_allow_html=True)
    
    # Performance optimization indicator with real-time monitoring
    st.markdown("**⚡ Real-time Performance Status**")
    perf_status, perf_class = st.session_state.perf_monitor.get_performance_badge()
    cache_efficiency = st.session_state.perf_monitor.get_cache_efficiency()
    
    # Advanced performance dashboard
    col1, col2 = st.columns(2)
    with col1:
        st.markdown(f"""
            <div class="{perf_class}">
                {perf_status}
            </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
            <div class="performance-badge">
                🎯 Cache: {cache_efficiency:.0f}%
            </div>
        """, unsafe_allow_html=True)
    
    # Real-time metrics display with system monitoring
    metrics = st.session_state.perf_monitor.metrics
    system_perf = get_system_performance()
    
    # System health indicator
    health_emoji = "🟢" if system_perf['system_healthy'] else "🟡"
    st.caption(f"{health_emoji} **System Health**: {'Optimal' if system_perf['system_healthy'] else 'Monitoring'}")
    
    # Advanced metrics
    if OPTIMIZATION_AVAILABLE:
        memory_stats = memory_optimizer.get_memory_stats()
        st.caption(f"📊 Analysis runs: {metrics['analysis_runs']} | Avg time: {metrics['avg_analysis_time']:.1f}s")
        st.caption(f"🧠 Memory: {memory_stats['memory_mb']:.0f}MB | Hit rate: {memory_stats['hit_rate']:.0f}%")
        
        # Resource alerts
        alerts = resource_monitor.check_resources()
        for alert in alerts[:2]:  # Show max 2 alerts
            emoji = "⚠️" if alert['level'] == 'warning' else "🔴" if alert['level'] == 'error' else "🟢"
            st.caption(f"{emoji} {alert['message']}")
    else:
        st.caption(f"📊 Analysis runs: {metrics['analysis_runs']} | Avg time: {metrics['avg_analysis_time']:.1f}s")
    
    # Performance tips based on current status with advanced logic
    if metrics['avg_analysis_time'] > 3.0:
        st.caption("💡 **Tip**: Try using shorter audio clips for faster analysis")
    elif OPTIMIZATION_AVAILABLE:
        memory_stats = memory_optimizer.get_memory_stats()
        if memory_stats['hit_rate'] < 80:
            st.caption("💡 **Tip**: Repeated similar analyses will be faster due to caching")
        elif system_perf['cpu_percent'] > 70:
            st.caption("💡 **Tip**: High CPU usage detected. Close other applications for better performance.")
        else:
            st.caption("✨ **Status**: System running at optimal performance!")
    else:
        st.caption("✨ **Status**: System running smoothly!")

    # ---------------------------
    # CLEAR DATA MODULE
    # ---------------------------
    class DataClearanceManager:
        """Comprehensive data clearance manager for AI Coach application"""
        
        def __init__(self):
            self.cleared_items = []
            self.errors = []
        
        def clear_session_state(self):
            """Clear all session state data while preserving essential app state"""
            try:
                # Essential keys to preserve
                preserve_keys = {
                    'perf_monitor',  # Performance monitor instance
                    'show_system_modal',  # UI state
                    'real_time_dashboard',  # UI state
                    'advanced_mode',  # UI state
                    'data_manager',  # Data clearance manager
                    'show_clear_confirmation'  # UI state
                }
                
                # Keys to clear
                clear_keys = {
                    'audio_recorded',
                    'performance_history', 
                    'analysis_count',
                    'best_score',
                    'sample_demo_audio',
                    'realtime_manager',
                    'note'
                }
                
                cleared_count = 0
                for key in list(st.session_state.keys()):
                    if key not in preserve_keys and (key in clear_keys or (isinstance(key, str) and key.startswith('temp_'))):
                        del st.session_state[key]
                        cleared_count += 1
                
                # Reset essential tracking values
                st.session_state.analysis_count = 0
                st.session_state.best_score = 0.0
                st.session_state.performance_history = []
                
                self.cleared_items.append(f"Session state ({cleared_count} items)")
                return True
            except Exception as e:
                self.errors.append(f"Session state: {str(e)}")
                return False
        
        def clear_audio_files(self):
            """Clear temporary audio files from session state and filesystem"""
            try:
                cleared_files = 0
                
                # Clear recorded audio from session state
                if 'audio_recorded' in st.session_state:
                    del st.session_state['audio_recorded']
                    cleared_files += 1
                
                # Clear temporary audio files from filesystem
                import glob
                temp_patterns = [
                    'temp_audio_*.wav',
                    'temp_audio_*.mp3', 
                    'temp_audio_*.m4a',
                    'uploaded_audio_*.wav',
                    'uploaded_audio_*.mp3',
                    'uploaded_audio_*.m4a'
                ]
                
                for pattern in temp_patterns:
                    for file_path in glob.glob(pattern):
                        try:
                            os.remove(file_path)
                            cleared_files += 1
                        except:
                            pass  # File might already be deleted
                
                self.cleared_items.append(f"Audio files ({cleared_files} items)")
                return True
            except Exception as e:
                self.errors.append(f"Audio files: {str(e)}")
                return False
        
        def clear_privacy_data(self):
            """Clear privacy-protected data using privacy manager"""
            try:
                if PRIVACY_PROTECTION_AVAILABLE:
                    # Use built-in privacy cleanup
                    result = immediate_privacy_cleanup()
                    if result:
                        self.cleared_items.append("Privacy-protected data (voice & face)")
                        return True
                    else:
                        self.errors.append("Privacy cleanup failed")
                        return False
                else:
                    # Manual cleanup when privacy protection unavailable
                    self.cleared_items.append("Privacy data (manual cleanup)")
                    return True
            except Exception as e:
                self.errors.append(f"Privacy data: {str(e)}")
                return False
        
        def clear_performance_cache(self):
            """Clear performance monitor metrics and cache"""
            try:
                # Reset performance monitor metrics
                if 'perf_monitor' in st.session_state:
                    monitor = st.session_state.perf_monitor
                    monitor.metrics = {
                        'page_loads': 0,
                        'analysis_runs': 0,
                        'cache_hits': 0,
                        'cache_misses': 0,
                        'avg_analysis_time': 0.0,
                        'memory_usage': 0.0
                    }
                    self.cleared_items.append("Performance metrics reset")
                
                # Clear Streamlit cache
                st.cache_data.clear()
                self.cleared_items.append("Streamlit cache")
                return True
            except Exception as e:
                self.errors.append(f"Performance cache: {str(e)}")
                return False
        
        def clear_realtime_data(self):
            """Clear real-time analysis data and dashboard state"""
            try:
                if 'realtime_manager' in st.session_state:
                    del st.session_state['realtime_manager']
                    self.cleared_items.append("Real-time analysis data")
                
                # Reset dashboard state
                st.session_state.real_time_dashboard = False
                
                return True
            except Exception as e:
                self.errors.append(f"Real-time data: {str(e)}")
                return False
        
        def clear_streamlit_cache(self):
            """Clear Streamlit cache"""
            try:
                st.cache_data.clear()
                self.cleared_items.append("Streamlit cache")
                return True
            except Exception as e:
                self.errors.append(f"Streamlit cache: {str(e)}")
                return False
        
        def clear_all_data(self):
            """Comprehensive data clearance - clears all types of data"""
            self.cleared_items = []
            self.errors = []
            
            # Execute all clearing operations
            operations = [
                ("Session State", self.clear_session_state),
                ("Audio Files", self.clear_audio_files),
                ("Privacy Data", self.clear_privacy_data),
                ("Performance Cache", self.clear_performance_cache),
                ("Real-time Data", self.clear_realtime_data),
                ("Streamlit Cache", self.clear_streamlit_cache)
            ]
            
            success_count = 0
            for name, operation in operations:
                try:
                    if operation():
                        success_count += 1
                except Exception as e:
                    self.errors.append(f"{name}: {str(e)}")
            
            return {
                'success_count': success_count,
                'total_operations': len(operations),
                'cleared_items': self.cleared_items,
                'errors': self.errors
            }
        
        def get_data_summary(self):
            """Get summary of data currently stored in the application"""
            summary = {
                'session_state_keys': len(st.session_state.keys()),
                'performance_history_entries': len(st.session_state.get('performance_history', [])),
                'analysis_count': st.session_state.get('analysis_count', 0),
                'best_score': st.session_state.get('best_score', 0.0),
                'has_audio_recorded': 'audio_recorded' in st.session_state,
                'has_realtime_manager': 'realtime_manager' in st.session_state,
                'cache_efficiency': st.session_state.perf_monitor.get_cache_efficiency() if 'perf_monitor' in st.session_state else 0
            }
            
            # Add privacy status if available
            if PRIVACY_PROTECTION_AVAILABLE:
                privacy_status = get_privacy_status()
                summary.update({
                    'active_voice_files': privacy_status.get('active_voice_files', 0),
                    'cache_size': privacy_status.get('cache_size', 0)
                })
            
            return summary

    def create_clear_data_interface():
        """Create the clear data interface in the sidebar"""
        st.sidebar.markdown("---")
        st.sidebar.markdown("🗑️ **Clear Data Module**")
        
        # Initialize data clearance manager
        if 'data_manager' not in st.session_state:
            st.session_state.data_manager = DataClearanceManager()
        
        manager = st.session_state.data_manager
        
        # Data summary
        with st.sidebar.expander("📊 Current Data Summary", expanded=False):
            summary = manager.get_data_summary()
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Session Items", summary['session_state_keys'])
                st.metric("Analysis Count", summary['analysis_count'])
            
            with col2:
                st.metric("Best Score", f"{summary['best_score']:.1f}%")
                st.metric("History Entries", summary['performance_history_entries'])
            
            # Status indicators
            st.caption(f"🎤 Audio Recorded: {'Yes' if summary['has_audio_recorded'] else 'No'}")
            st.caption(f"📊 Real-time Active: {'Yes' if summary['has_realtime_manager'] else 'No'}")
            st.caption(f"⚡ Cache Efficiency: {summary['cache_efficiency']:.0f}%")
            
            if PRIVACY_PROTECTION_AVAILABLE:
                st.caption(f"🔒 Voice Files: {summary.get('active_voice_files', 0)}")
        
        # Clear data options
        st.sidebar.markdown("**🧹 Selective Clearing:**")
        
        clear_col1, clear_col2 = st.sidebar.columns(2)
        
        with clear_col1:
            if st.button("🎤 Audio", help="Clear recorded audio and uploaded files", key="clear_audio"):
                manager.clear_audio_files()
                if manager.cleared_items:
                    st.success(f"✅ Cleared: {manager.cleared_items[-1]}")
                if manager.errors:
                    st.error(f"❌ Error: {manager.errors[-1]}")
                st.rerun()
            
            if st.button("📊 Stats", help="Clear performance history and analytics", key="clear_stats"):
                # Clear just performance data
                st.session_state.performance_history = []
                st.session_state.analysis_count = 0
                st.session_state.best_score = 0.0
                st.success("✅ Performance data cleared!")
                st.rerun()
        
        with clear_col2:
            if st.button("🔒 Privacy", help="Clear privacy-protected voice and face data", key="clear_privacy"):
                manager.clear_privacy_data()
                if manager.cleared_items:
                    st.success(f"✅ Cleared: {manager.cleared_items[-1]}")
                if manager.errors:
                    st.error(f"❌ Error: {manager.errors[-1]}")
                st.rerun()
            
            if st.button("⚡ Cache", help="Clear performance cache and optimization data", key="clear_cache"):
                manager.clear_performance_cache()
                if manager.cleared_items:
                    st.success(f"✅ Cleared: {manager.cleared_items[-1]}")
                if manager.errors:
                    st.error(f"❌ Error: {manager.errors[-1]}")
                st.rerun()
        
        # Complete clear option with confirmation
        st.sidebar.markdown("**🚨 Complete Data Clearance:**")
        
        if st.sidebar.button("🗑️ **Clear All Data**", help="Clear ALL application data", key="clear_all", type="secondary"):
            st.session_state.show_clear_confirmation = True
        
        # Confirmation dialog
        if st.session_state.get('show_clear_confirmation', False):
            st.sidebar.markdown("---")
            st.sidebar.warning("⚠️ **Confirm Complete Data Clearance**")
            st.sidebar.markdown("This will clear:")
            st.sidebar.markdown("• All audio recordings")
            st.sidebar.markdown("• Performance history")
            st.sidebar.markdown("• Privacy-protected data")
            st.sidebar.markdown("• Cache and temporary files")
            st.sidebar.markdown("• Real-time analysis data")
            
            confirm_col1, confirm_col2 = st.sidebar.columns(2)
            
            with confirm_col1:
                if st.button("✅ Confirm", key="confirm_clear", type="primary"):
                    result = manager.clear_all_data()
                    
                    # Show results
                    if result['success_count'] == result['total_operations']:
                        st.success(f"✅ All data cleared successfully!")
                        st.balloons()
                    else:
                        st.warning(f"⚠️ Partial success: {result['success_count']}/{result['total_operations']} operations completed")
                    
                    # Show what was cleared
                    if result['cleared_items']:
                        st.sidebar.markdown("**Cleared:**")
                        for item in result['cleared_items']:
                            st.sidebar.caption(f"✅ {item}")
                    
                    # Show any errors
                    if result['errors']:
                        st.sidebar.markdown("**Errors:**")
                        for error in result['errors']:
                            st.sidebar.caption(f"❌ {error}")
                    
                    st.session_state.show_clear_confirmation = False
                    st.rerun()
            
            with confirm_col2:
                if st.button("❌ Cancel", key="cancel_clear"):
                    st.session_state.show_clear_confirmation = False
                    st.rerun()
        
        # Quick tips
        st.sidebar.markdown("---")
        st.sidebar.caption("💡 **Tips:**")
        st.sidebar.caption("• Use selective clearing for specific data types")
        st.sidebar.caption("• Complete clearance resets the entire application")
        st.sidebar.caption("• Privacy data is automatically cleaned in most cases")

# Create the clear data interface in the sidebar
create_clear_data_interface()

st.markdown("---")
# CSS CUSTOMIZATIONS
# ---------------------------
base_css = f"""
<style>
:root {{
    --accent: {accent_color};
    --radius: 12px;
}}

/* Enhanced Glass-morphism cards with hardware acceleration */
.stApp > header {{
    background: transparent !important;
}}
.block-container {{
    padding-top: 2rem !important;
}}

/* Theme-based card shadows with performance optimization */
.card-shadow-light {{
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08), 0 0 1px rgba(0, 0, 0, 0.05) !important;
}}

.card-shadow-dark {{
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.25), 0 0 1px rgba(0, 0, 0, 0.1) !important;
}}

/* Enhanced Input Fields with focus effects */
input, textarea, select {{
    background: rgba(255, 255, 255, 0.05) !important;
    backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.1) !important;
    position: relative;
}}
input:focus, textarea:focus, select:focus {{
    outline: none !important;
    border: 1px solid var(--accent) !important;
    box-shadow: 
        0 0 20px color-mix(in oklab, var(--accent) 40%, transparent),
        0 0 40px color-mix(in oklab, var(--accent) 20%, transparent),
        0 4px 20px rgba(0, 0, 0, 0.1) !important;
    transform: scale(1.02) translateY(-2px);
    background: rgba(255, 255, 255, 0.1) !important;
}}

/* Enhanced Progress Bar with dynamic animation */
.stProgress > div > div > div > div {{
    background: linear-gradient(
        90deg, 
        var(--accent), 
        color-mix(in srgb, var(--accent) 70%, #fff),
        var(--accent)
    );
    background-size: 200% 100%;
    animation: progressFlow 2s ease-in-out infinite;
    box-shadow: 0 0 20px color-mix(in oklab, var(--accent) 40%, transparent);
    border-radius: 10px;
}}

@keyframes progressFlow {{
    0%, 100% {{ 
        background-position: 0% 50%;
        opacity: 0.8;
    }}
    50% {{ 
        background-position: 100% 50%;
        opacity: 1;
    }}
}}

/* Enhanced Card with breathing effect - Following user animation preferences + Advanced GPU optimizations */
.stCard {{
    border-radius: var(--radius);
    padding: 1.25rem;
    margin-bottom: 1.25rem;
    animation: fadeUp 0.6s ease, cardBreathe 4s ease-in-out infinite;
    background: rgba(255, 255, 255, 0.08);
    backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    will-change: transform, box-shadow;
    contain: layout style paint;
}}

.stCard::before {{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, var(--accent), color-mix(in srgb, var(--accent) 70%, #fff));
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.4s ease;
    will-change: transform;
}}

.stCard::after {{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
        45deg,
        transparent 30%,
        rgba(255, 255, 255, 0.02) 50%,
        transparent 70%
    );
    transform: translateX(-100%);
    transition: transform 0.8s ease;
    pointer-events: none;
    will-change: transform;
}}

.stCard:hover {{
    transform: translateY(-8px) scale3d(1.02, 1.02, 1);
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2), 0 0 40px rgba(79, 70, 229, 0.3);
    border-color: rgba(79, 70, 229, 0.3);
}}

.stCard:hover::before {{
    transform: scaleX(1);
}}

.stCard:hover::after {{
    transform: translateX(100%);
}}

/* Custom loader with enhanced animation */
.ai-loader {{
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    margin: .75rem 0;
}}
.ai-loader .dot {{
    width: 10px; height: 10px;
    background: linear-gradient(45deg, var(--accent), color-mix(in srgb, var(--accent) 70%, #fff));
    border-radius: 50%;
    animation: bounce .6s infinite alternate, dotGlow 2s ease-in-out infinite;
    opacity: .9;
}}
.ai-loader .dot:nth-child(2) {{ animation-delay: .15s; }}
.ai-loader .dot:nth-child(3) {{ animation-delay: .3s; }}

/* Advanced Interactive Elements */
.interactive-metric {{
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border-radius: 10px;
    padding: 0.5rem;
    position: relative;
    will-change: transform;
}}

.interactive-metric:hover {{
    transform: scale3d(1.05, 1.05, 1);
    background: rgba(79, 70, 229, 0.1);
    backdrop-filter: blur(10px);
}}

/* Real-time Performance Indicators */
.performance-badge {{
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
    background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(16, 185, 129, 0.05));
    border: 1px solid rgba(16, 185, 129, 0.2);
    color: rgb(16, 185, 129);
    animation: badgePulse 2s ease-in-out infinite;
    will-change: opacity;
}}

.performance-badge.warning {{
    background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(245, 158, 11, 0.05));
    border-color: rgba(245, 158, 11, 0.2);
    color: rgb(245, 158, 11);
}}

.performance-badge.error {{
    background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(239, 68, 68, 0.05));
    border-color: rgba(239, 68, 68, 0.2);
    color: rgb(239, 68, 68);
}}

@keyframes badgePulse {{
    0%, 100% {{ opacity: 1; }}
    50% {{ opacity: 0.7; }}
}}

/* Enhanced Floating Action Button */
.fab {{
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--accent), color-mix(in srgb, var(--accent) 80%, #fff));
    box-shadow: 0 8px 32px rgba(79, 70, 229, 0.4);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1000;
    will-change: transform;
    animation: fabFloat 3s ease-in-out infinite;
}}

.fab:hover {{
    transform: scale3d(1.1, 1.1, 1) translateY(-4px);
    box-shadow: 0 12px 40px rgba(79, 70, 229, 0.6);
}}

@keyframes fabFloat {{
    0%, 100% {{ transform: translateY(0px); }}
    50% {{ transform: translateY(-8px); }}
}}

/* Performance-optimized Keyframes with GPU acceleration */
@keyframes cardBreathe {{
    0%, 100% {{ 
        transform: scale3d(1, 1, 1); 
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }}
    50% {{ 
        transform: scale3d(1.005, 1.005, 1); 
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15), 0 0 20px rgba(79, 70, 229, 0.2);
    }}
}}

@keyframes pulseGlow {{
    0%, 100% {{ 
        box-shadow: 0px 10px 18px rgba(0,0,0,0.18), 0 0 20px rgba(79, 70, 229, 0.3);
        transform: scale3d(1, 1, 1);
    }}
    50% {{ 
        box-shadow: 0px 10px 18px rgba(0,0,0,0.18), 0 0 30px rgba(79, 70, 229, 0.5);
        transform: scale3d(1.02, 1.02, 1);
    }}
}}

@keyframes fadeIn {{ 
    from {{ opacity: 0; transform: translate3d(0, 10px, 0); }} 
    to {{ opacity: 1; transform: translate3d(0, 0, 0); }} 
}}
@keyframes slideDown {{ 
    from {{ transform: translate3d(0, -16px, 0); opacity: 0; }} 
    to {{ transform: translate3d(0, 0, 0); opacity: 1; }} 
}}
@keyframes fadeUp {{ 
    from {{ transform: translate3d(0, 12px, 0); opacity: 0; }} 
    to {{ transform: translate3d(0, 0, 0); opacity: 1; }} 
}}
@keyframes bounce {{ 
    from {{ transform: translate3d(0, 0, 0); }} 
    to {{ transform: translate3d(0, -8px, 0); }} 
}}

@keyframes dotGlow {{
    0%, 100% {{ 
        box-shadow: 0 0 10px color-mix(in oklab, var(--accent) 40%, transparent);
    }}
    50% {{ 
        box-shadow: 0 0 20px color-mix(in oklab, var(--accent) 60%, transparent);
    }}
}}

/* Advanced micro-interactions */
@keyframes microBounce {{
    0%, 100% {{ transform: scale3d(1, 1, 1); }}
    50% {{ transform: scale3d(1.02, 1.02, 1); }}
}}

@keyframes shimmer {{
    0% {{ transform: translateX(-100%); }}
    100% {{ transform: translateX(100%); }}
}}

/* Performance optimization directives */
* {{
    box-sizing: border-box;
}}

.stApp {{
    contain: layout style;
    will-change: background;
}}
</style>
"""

if theme == "Light Professional":
    theme_css = """
    <style>
    .stApp {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        animation: lightPulseStable 12s ease-in-out infinite;
    }
    
    @keyframes lightPulseStable {
        0%, 100% { background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); }
        50% { background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%); }
    }
    
    .block-container { 
        background: rgba(255, 255, 255, 0.85); 
        color: #1f2937; 
        border: 1px solid rgba(0, 0, 0, 0.05);
        backdrop-filter: blur(10px);
    }
    h1, h2, h3 { 
        color: #111827; 
        text-shadow: 0 2px 4px rgba(79, 70, 229, 0.1);
    }
    .stCard { 
        background: rgba(249, 250, 251, 0.95); 
        box-shadow: var(--card-shadow-light), 0 0 20px rgba(79, 70, 229, 0.05); 
        border: 1px solid rgba(255, 255, 255, 0.3);
    }
    </style>
    """
elif theme == "Dark Professional":
    theme_css = """
    <style>
    .stApp {
        background: linear-gradient(135deg, #0f1419 0%, #1e293b 100%);
        animation: darkPulseStable 12s ease-in-out infinite;
    }
    
    @keyframes darkPulseStable {
        0%, 100% { background: linear-gradient(135deg, #0f1419 0%, #1e293b 100%); }
        50% { background: linear-gradient(135deg, #1e293b 0%, #2d3748 100%); }
    }
    
    .block-container { 
        background: rgba(15, 17, 23, 0.85); 
        color: #e5e7eb; 
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
    }
    h1, h2, h3 { 
        color: #f3f4f6; 
        text-shadow: 0 2px 8px rgba(79, 70, 229, 0.3);
    }
    .stCard { 
        background: rgba(31, 41, 55, 0.85); 
        box-shadow: var(--card-shadow-dark), 0 0 20px rgba(79, 70, 229, 0.1); 
        border: 1px solid rgba(255, 255, 255, 0.15);
    }
    input, textarea, select { 
        background: rgba(17, 24, 39, 0.8) !important; 
        color: #e5e7eb !important; 
        border: 1px solid rgba(55, 65, 81, 0.8) !important; 
    }
    </style>
    """
elif theme == "Ocean Breeze":
    theme_css = """
    <style>
    .stApp {
        background: linear-gradient(135deg, #0ea5e9 0%, #0284c7 50%, #0369a1 100%);
        animation: oceanPulseStable 15s ease-in-out infinite;
    }
    
    @keyframes oceanPulseStable {
        0%, 100% { background: linear-gradient(135deg, #0ea5e9 0%, #0284c7 50%, #0369a1 100%); }
        50% { background: linear-gradient(135deg, #0284c7 0%, #0369a1 50%, #1e40af 100%); }
    }
    
    .block-container { 
        background: rgba(255, 255, 255, 0.12); 
        color: #f8fafc; 
        border: 1px solid rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(15px);
    }
    h1, h2, h3 { 
        color: #ffffff; 
        text-shadow: 0 2px 8px rgba(0, 0, 0, 0.4), 0 0 20px rgba(255, 255, 255, 0.2);
    }
    .stCard { 
        background: rgba(255, 255, 255, 0.08); 
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3), 0 0 20px rgba(255, 255, 255, 0.1); 
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
    input, textarea, select { 
        background: rgba(255, 255, 255, 0.1) !important; 
        color: #f8fafc !important; 
        border: 1px solid rgba(255, 255, 255, 0.3) !important; 
    }
    </style>
    """
elif theme == "Sunset Glow":
    theme_css = """
    <style>
    .stApp {
        background: linear-gradient(135deg, #ff8a65 0%, #ffa726 50%, #ffcc02 100%);
        animation: sunsetPulseStable 18s ease-in-out infinite;
    }
    
    @keyframes sunsetPulseStable {
        0%, 100% { background: linear-gradient(135deg, #ff8a65 0%, #ffa726 50%, #ffcc02 100%); }
        50% { background: linear-gradient(135deg, #ffa726 0%, #ffcc02 50%, #ff8a65 100%); }
    }
    
    .block-container { 
        background: rgba(255, 255, 255, 0.85); 
        color: #2d3748; 
        border: 1px solid rgba(255, 255, 255, 0.4);
        backdrop-filter: blur(15px);
    }
    h1, h2, h3 { 
        color: #1a202c; 
        text-shadow: 0 2px 4px rgba(255, 255, 255, 0.3), 0 0 15px rgba(255, 165, 38, 0.3);
    }
    .stCard { 
        background: rgba(255, 255, 255, 0.75); 
        box-shadow: 0 8px 32px rgba(255, 107, 107, 0.2), 0 0 20px rgba(255, 165, 38, 0.1); 
        border: 1px solid rgba(255, 255, 255, 0.5);
    }
    input, textarea, select { 
        background: rgba(255, 255, 255, 0.7) !important; 
        color: #2d3748 !important; 
        border: 1px solid rgba(255, 165, 38, 0.3) !important; 
    }
    </style>
    """
elif theme == "Forest Calm":
    theme_css = """
    <style>
    .stApp {
        background: linear-gradient(135deg, #16a085 0%, #27ae60 50%, #2ecc71 100%);
        animation: forestPulseStable 16s ease-in-out infinite;
    }
    
    @keyframes forestPulseStable {
        0%, 100% { background: linear-gradient(135deg, #16a085 0%, #27ae60 50%, #2ecc71 100%); }
        50% { background: linear-gradient(135deg, #27ae60 0%, #2ecc71 50%, #58d68d 100%); }
    }
    
    .block-container { 
        background: rgba(255, 255, 255, 0.10); 
        color: #f7f9fc; 
        border: 1px solid rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(15px);
    }
    h1, h2, h3 { 
        color: #ffffff; 
        text-shadow: 0 2px 8px rgba(0, 0, 0, 0.4), 0 0 20px rgba(46, 204, 113, 0.3);
    }
    .stCard { 
        background: rgba(255, 255, 255, 0.06); 
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3), 0 0 20px rgba(46, 204, 113, 0.2); 
        border: 1px solid rgba(255, 255, 255, 0.15);
    }
    input, textarea, select { 
        background: rgba(255, 255, 255, 0.1) !important; 
        color: #f7f9fc !important; 
        border: 1px solid rgba(255, 255, 255, 0.25) !important; 
    }
    </style>
    """
elif theme == "Purple Dreams":
    theme_css = """
    <style>
    .stApp {
        background: linear-gradient(135deg, #8e44ad 0%, #9b59b6 50%, #af7ac5 100%);
        animation: purplePulseStable 14s ease-in-out infinite;
    }
    
    @keyframes purplePulseStable {
        0%, 100% { background: linear-gradient(135deg, #8e44ad 0%, #9b59b6 50%, #af7ac5 100%); }
        50% { background: linear-gradient(135deg, #9b59b6 0%, #af7ac5 50%, #d2b4de 100%); }
    }
    
    .block-container { 
        background: rgba(255, 255, 255, 0.12); 
        color: #ffffff; 
        border: 1px solid rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(15px);
    }
    h1, h2, h3 { 
        color: #ffffff; 
        text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3), 0 0 20px rgba(175, 122, 197, 0.4);
    }
    .stCard { 
        background: rgba(255, 255, 255, 0.08); 
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3), 0 0 20px rgba(155, 89, 182, 0.3); 
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
    input, textarea, select { 
        background: rgba(255, 255, 255, 0.1) !important; 
        color: #ffffff !important; 
        border: 1px solid rgba(255, 255, 255, 0.3) !important; 
    }
    </style>
    """
elif theme == "Midnight Blue":
    theme_css = """
    <style>
    .stApp {
        background: linear-gradient(135deg, #1a237e 0%, #283593 50%, #3949ab 100%);
        animation: midnightPulseStable 13s ease-in-out infinite;
    }
    
    @keyframes midnightPulseStable {
        0%, 100% { background: linear-gradient(135deg, #1a237e 0%, #283593 50%, #3949ab 100%); }
        50% { background: linear-gradient(135deg, #283593 0%, #3949ab 50%, #5c6bc0 100%); }
    }
    
    .block-container { 
        background: rgba(255, 255, 255, 0.06); 
        color: #e3f2fd; 
        border: 1px solid rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(15px);
    }
    h1, h2, h3 { 
        color: #ffffff; 
        text-shadow: 0 2px 8px rgba(0, 0, 0, 0.4), 0 0 25px rgba(92, 107, 192, 0.4);
    }
    .stCard { 
        background: rgba(255, 255, 255, 0.04); 
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4), 0 0 20px rgba(57, 73, 171, 0.3); 
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    input, textarea, select { 
        background: rgba(255, 255, 255, 0.08) !important; 
        color: #e3f2fd !important; 
        border: 1px solid rgba(255, 255, 255, 0.2) !important; 
    }
    </style>
    """
elif theme == "Rose Gold":
    theme_css = """
    <style>
    .stApp {
        background: linear-gradient(135deg, #e91e63 0%, #f06292 50%, #f8bbd9 100%);
        animation: roseGoldPulseStable 20s ease-in-out infinite;
    }
    
    @keyframes roseGoldPulseStable {
        0%, 100% { background: linear-gradient(135deg, #e91e63 0%, #f06292 50%, #f8bbd9 100%); }
        50% { background: linear-gradient(135deg, #f06292 0%, #f8bbd9 50%, #fce4ec 100%); }
    }
    
    .block-container { 
        background: rgba(255, 255, 255, 0.80); 
        color: #2c2c2c; 
        border: 1px solid rgba(233, 30, 99, 0.2);
        backdrop-filter: blur(15px);
    }
    h1, h2, h3 { 
        color: #ad1457; 
        text-shadow: 0 2px 4px rgba(255, 255, 255, 0.5), 0 0 15px rgba(233, 30, 99, 0.2);
    }
    .stCard { 
        background: rgba(255, 255, 255, 0.65); 
        box-shadow: 0 8px 32px rgba(233, 30, 99, 0.15), 0 0 20px rgba(240, 98, 146, 0.1); 
        border: 1px solid rgba(255, 255, 255, 0.6);
    }
    input, textarea, select { 
        background: rgba(255, 255, 255, 0.8) !important; 
        color: #2c2c2c !important; 
        border: 1px solid rgba(233, 30, 99, 0.3) !important; 
    }
    </style>
    """
else:
    # Default fallback to Dark Professional
    theme_css = """
    <style>
    .stApp {
        background: linear-gradient(135deg, #0f1419 0%, #1e293b 100%);
        animation: darkPulseStable 12s ease-in-out infinite;
    }
    
    @keyframes darkPulseStable {
        0%, 100% { background: linear-gradient(135deg, #0f1419 0%, #1e293b 100%); }
        50% { background: linear-gradient(135deg, #1e293b 0%, #2d3748 100%); }
    }
    
    .block-container { 
        background: rgba(15, 17, 23, 0.85); 
        color: #e5e7eb; 
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
    }
    h1, h2, h3 { 
        color: #f3f4f6; 
        text-shadow: 0 2px 8px rgba(79, 70, 229, 0.3);
    }
    .stCard { 
        background: rgba(31, 41, 55, 0.85); 
        box-shadow: var(--card-shadow-dark), 0 0 20px rgba(79, 70, 229, 0.1); 
        border: 1px solid rgba(255, 255, 255, 0.15);
    }
    input, textarea, select { 
        background: rgba(17, 24, 39, 0.8) !important; 
        color: #e5e7eb !important; 
        border: 1px solid rgba(55, 65, 81, 0.8) !important; 
    }
    </style>
    """

st.markdown(base_css + theme_css, unsafe_allow_html=True)

# Top header title (sticky)
st.markdown(
    """
<div class="top-header">
  <div class="top-header-inner">
    <span class="app-title">AI Coach — Professional Voice Analysis</span>
  </div>
</div>
<style>
.top-header{position:sticky; top:0; z-index:1000; padding:10px 16px; border-bottom:1px solid rgba(255,255,255,0.08); background: transparent; backdrop-filter: blur(10px);}
.top-header-inner{display:flex; align-items:center; justify-content:center;}
.app-title{font-weight:700; letter-spacing:.2px;}
</style>
""",
    unsafe_allow_html=True
)

# Inject Anime.js and animation runner
st.markdown(
    """
<script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>
<script>
function runAnimations(){
  // Titles
  anime({
    targets: 'h1, h2, h3',
    opacity: [0,1],
    translateY: [-12, 0],
    duration: 800,
    easing: 'easeOutExpo',
    delay: anime.stagger(50)
  });

  // Cards
  anime({
    targets: '.stCard',
    opacity: [0,1],
    translateY: [10,0],
    duration: 900,
    easing: 'easeOutCubic',
    delay: anime.stagger(120, {start: 120})
  });

  // Buttons
  anime({
    targets: "div.stButton > button",
    opacity: [0,1],
    translateY: [8,0],
    duration: 700,
    easing: 'easeOutBack',
    delay: 500
  });

  // Performance badges pulse
  anime({
    targets: '.performance-badge',
    scale: [1, 1.05],
    direction: 'alternate',
    duration: 1200,
    easing: 'easeInOutSine',
    loop: true,
    delay: 800
  });
}

document.addEventListener('DOMContentLoaded', runAnimations);
setTimeout(runAnimations, 700);
</script>
""",
    unsafe_allow_html=True
)

# ---------------------------
# FLOATING ACTION BUTTON & SYSTEM CONTROLS
# ---------------------------
fab_html = f"""
<div class="fab" onclick="showSystemControls()" title="System Controls">
    <span style="color: white; font-size: 24px;">⚙️</span>
</div>

<script>
function showSystemControls() {{
    // Show system control modal (implemented via Streamlit)
    window.parent.postMessage({{
        type: 'SHOW_SYSTEM_CONTROLS',
        data: 'fab_clicked'
    }}, '*');
}}
</script>
"""

# Add FAB to page
st.markdown(fab_html, unsafe_allow_html=True)

# System controls modal (triggered by session state)
if 'show_system_modal' not in st.session_state:
    st.session_state.show_system_modal = False

# Add manual system control button for demo
if st.sidebar.button("⚙️ System Controls", help="Show advanced system controls"):
    st.session_state.show_system_modal = True

if st.session_state.show_system_modal:
    with st.sidebar:
        st.markdown("---")
        st.markdown("**🔧 Advanced System Controls**")
        
        if OPTIMIZATION_AVAILABLE:
            # Memory optimization controls
            col1, col2 = st.columns(2)
            with col1:
                if st.button("🧠 Clear Cache", help="Clear memory cache"):
                    memory_optimizer.cleanup_memory()
                    st.success("Cache cleared!")
            
            with col2:
                if st.button("📊 Stats", help="Show detailed stats"):
                    stats = memory_optimizer.get_memory_stats()
                    st.json(stats)
            
            # System performance display
            system_perf = get_system_performance()
            st.metric("CPU Usage", f"{system_perf['cpu_percent']:.1f}%")
            st.metric("Memory Usage", f"{system_perf['memory_percent']:.1f}%")
            
            # Resource alerts
            alerts = resource_monitor.check_resources()
            if alerts:
                st.markdown("**⚠️ Active Alerts:**")
                for alert in alerts:
                    st.warning(f"{alert['message']} - {alert['suggestion']}")
        
        # Close modal
        if st.button("❌ Close Controls"):
            st.session_state.show_system_modal = False
            st.rerun()

# ---------------------------
# ADVANCED ANALYTICS DASHBOARD
# ---------------------------
# Initialize variables with default values
enable_comparison_mode = True  # Enable by default for demo
demo_mode = False  # Disable demo mode by default
enable_multimodal_analysis = True  # Enable by default
focus_area = "General Communication"  # Default focus area

if enable_comparison_mode and len(st.session_state.performance_history) > 0:
    st.markdown("---")
    st.markdown("### 📊 Advanced Performance Analytics")
    
    # Performance trends
    history = st.session_state.performance_history
    if len(history) >= 2:
        chart = create_performance_chart(history)
        if chart:
            st.plotly_chart(chart, use_container_width=True, config={'displayModeBar': False})
    
    # Performance insights with AI-powered suggestions
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "🏆 Best Score", 
            f"{st.session_state.best_score:.1f}%",
            help="Your highest score across all sessions"
        )
    
    with col2:
        avg_score = sum(entry["overall_score"] for entry in history) / len(history)
        st.metric(
            "📊 Average Score", 
            f"{avg_score:.1f}%",
            help="Your average performance across all sessions"
        )
    
    with col3:
        if len(history) >= 2:
            trend = history[-1]["overall_score"] - history[-2]["overall_score"]
            st.metric(
                "📈 Trend", 
                f"{trend:+.1f}%",
                delta=f"{trend:+.1f}%",
                help="Change from your last session"
            )
        else:
            st.metric("📈 Trend", "N/A", help="Need more sessions to show trend")

# ---------------------------
# PRIVACY PROTECTION DASHBOARD
# ---------------------------
if PRIVACY_PROTECTION_AVAILABLE:
    st.markdown("---")
    st.markdown("### 🔒 **Privacy Protection Dashboard**")
    
    privacy_col1, privacy_col2, privacy_col3 = st.columns(3)
    
    with privacy_col1:
        privacy_status = get_privacy_status()
        st.markdown("🛡️ **Data Protection Status**")
        status_emoji = "✅" if privacy_status['compliance_status'] == 'ACTIVE' else "⚠️"
        st.markdown(f"{status_emoji} **{privacy_status['compliance_status']}**")
        
        if privacy_status['compliance_status'] == 'ACTIVE':
            st.success("All voice and face data is automatically protected")
        else:
            st.info("Privacy protection initialized")
    
    with privacy_col2:
        st.markdown("📊 **Current Data Tracking**")
        st.metric("🎤 Voice Files", privacy_status.get('active_voice_files', 0))
        st.metric("📋 Cache Size", privacy_status.get('cache_size', 0))

    with privacy_col3:
        st.markdown("⏰ **Auto-Cleanup Settings**")
        max_age = privacy_status.get('max_file_age_minutes', 5)
        st.info(f"Data deleted after: **{max_age:.0f} minutes**")
        st.info("Secure deletion: **3-pass overwrite**")
    
    # Privacy actions
    st.markdown("**🔧 Privacy Actions**")
    action_col1, action_col2, action_col3 = st.columns(3)
    
    with action_col1:
        if st.button("🗑️ **Clear All Data Now**", help="Immediately delete all voice and face data"):
            immediate_privacy_cleanup()
            st.success("✅ All sensitive data securely deleted!")
            st.balloons()
            st.rerun()
    
    with action_col2:
        if st.button("📊 **Privacy Report**", help="View detailed privacy compliance report"):
            detailed_report = privacy_manager.get_detailed_privacy_log(20)
            if detailed_report:
                st.json(detailed_report[-5:])  # Show last 5 actions
            else:
                st.info("No privacy actions recorded yet")
    
    with action_col3:
        if st.button("💾 **Export Report**", help="Export privacy compliance report"):
            if privacy_manager.export_privacy_report("privacy_compliance_report.json"):
                st.success("💾 Report exported successfully!")
            else:
                st.error("Failed to export report")
    
    # Privacy compliance info
    st.markdown("---")
    st.markdown("🏆 **Privacy Compliance Features:**")
    
    compliance_features = [
        "✅ **Automatic Data Deletion** - All voice recordings deleted after analysis",
        "✅ **Secure File Overwriting** - 3-pass random data overwrite for complete deletion",
        "✅ **Memory Protection** - Face data cleared from memory immediately after use",
        "✅ **Session Isolation** - Each session uses isolated temporary storage",
        "✅ **No Persistent Storage** - No voice or face data saved permanently",
        "✅ **Audit Trail** - Complete log of all privacy-related actions",
        "✅ **GDPR Compliance** - Meets data protection regulation requirements",
        "✅ **Real-time Monitoring** - Continuous tracking of sensitive data"
    ]
    
    for feature in compliance_features:
        st.markdown(f"  {feature}")
else:
    st.warning("⚠️ **Privacy Protection**: Privacy module not available. Voice and face data may not be automatically deleted.")

# ---------------------------
# ENHANCED HEADER WITH PRIVACY NOTICE
# ---------------------------
st.title("🚀 AI Coach - Professional Voice Analysis")
st.markdown(
    f"A modern, professional voice analysis platform with **{theme}** theme, *enhanced theming system, accent color customization, custom animations,* "
    "and *performance-optimized UI* designed to impress judges at first glance."
)

# Privacy protection notice
if PRIVACY_PROTECTION_AVAILABLE:
    st.markdown(
        "🔒 **Privacy Protection Active**: All voice and face data is automatically deleted after analysis. "
        "See the [Privacy Dashboard](#privacy-protection-dashboard) for details."
    )
else:
    st.markdown(
        "⚠️ **Privacy Protection Unavailable**: Voice and face data may not be automatically deleted. "
        "Please be cautious with sensitive information."
    )

# Additional helper functions that were missing

import streamlit as st
from utils import PerformanceMonitor

# Initialize performance monitor immediately after page config
if 'perf_monitor' not in st.session_state:
    st.session_state.perf_monitor = PerformanceMonitor()

# Performance optimization: Cache session state initialization
@st.cache_data
def get_default_preferences():
    return {
        "focus_area": "General Communication",
        "analysis_depth": "Standard",
        "coaching_style": "Encouraging"
    }

# Initialize session state for advanced features with optimized defaults
if "performance_history" not in st.session_state:
    st.session_state.performance_history = []
if "analysis_count" not in st.session_state:
    st.session_state.analysis_count = 0
if "best_score" not in st.session_state:
    st.session_state.best_score = 0
if "user_preferences" not in st.session_state:
    st.session_state.user_preferences = get_default_preferences()
if "advanced_mode" not in st.session_state:
    st.session_state.advanced_mode = False
if "real_time_dashboard" not in st.session_state:
    st.session_state.real_time_dashboard = False
if "show_clear_confirmation" not in st.session_state:
    st.session_state.show_clear_confirmation = False
if "audio_recorded" not in st.session_state:
    st.session_state.audio_recorded = None

# Recording section with enhanced performance tracking

# Advanced dashboard toggle
if enable_multimodal_analysis and REALTIME_ANALYSIS_AVAILABLE:
    st.markdown("---")
    dashboard_col1, dashboard_col2 = st.columns([3, 1])
    
    with dashboard_col1:
        st.markdown("### 🔴 **Real-Time Multimodal Analysis Dashboard**")
        st.caption("🌟 **NEW**: Synchronized voice + emotion + gesture analysis with live feedback")
        
        # Show face analysis status
        if st.session_state.get('face_analysis_enabled', False):
            st.success("🎭 Face analysis is ENABLED - Real-time emotion and movement tracking will be included")
        else:
            st.info("🎭 Face analysis is DISABLED - Enable it in the Analysis Controls panel")
    
    with dashboard_col2:
        if st.button("🚀 Launch Dashboard", help="Open real-time multimodal analysis"):
            st.session_state.real_time_dashboard = True
            st.rerun()
    
    # Show real-time dashboard if enabled
    if st.session_state.real_time_dashboard:
        st.markdown("---")
        create_realtime_dashboard()
        
        # Dashboard control
        if st.button("📊 Return to Voice Analysis", help="Return to main voice analysis interface"):
            st.session_state.real_time_dashboard = False
            st.rerun()
        
        # Skip the main interface when dashboard is active
        st.stop()

# ---------------------------
# LAYOUT
# ---------------------------
left, right = st.columns(2)

with left:
    st.markdown("<div class='stCard'>", unsafe_allow_html=True)
    st.subheader("🎤 Record or Upload Audio")
    st.caption("Record your voice or upload an audio file for professional analysis.")
    
    # Audio file uploader
    audio_file = st.file_uploader("Upload audio file", type=["wav", "mp3", "m4a"], key="uploader")
    
    # Enhanced audiorecorder styling
    st.markdown("""
    <style>
    div[data-testid="stAudioRecorder"] {
        background: linear-gradient(135deg, var(--accent) 0%, color-mix(in srgb, var(--accent) 70%, #000) 100%) !important;
        border-radius: 20px !important;
        padding: 25px !important;
        box-shadow: 0 10px 30px rgba(0,0,0,0.3) !important;
        border: 2px solid rgba(255, 255, 255, 0.1) !important;
        margin: 20px 0 !important;
    }

    div[data-testid="stAudioRecorder"] button {
        background: rgba(255, 255, 255, 0.9) !important;
        color: var(--accent) !important;
        border: none !important;
        border-radius: 15px !important;
        padding: 15px 30px !important;
        font-size: 16px !important;
        font-weight: bold !important;
        cursor: pointer !important;
        transition: all 0.3s ease !important;
    }

    div[data-testid="stAudioRecorder"] button:hover {
        transform: translateY(-2px) scale(1.05) !important;
        box-shadow: 0 8px 20px rgba(0,0,0,0.2) !important;
        background: white !important;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown('<p style="text-align: center; font-size: 16px; margin-bottom: 15px; font-weight: 600;">🎆 Professional Voice Recording 🎆</p>', unsafe_allow_html=True)
    
    recorded_audio = []
    if audiorecorder is not None:
        recorded_audio = audiorecorder(
            start_prompt="🎙 Start Recording",
            stop_prompt="⏹ Stop Recording",
            key="simple_recorder"
        )
    else:
        st.info("🎙 In-browser recorder unavailable. Use file upload or demo mode.")
    
    if isinstance(recorded_audio, (list, bytes)) and len(recorded_audio) > 0:
        st.session_state.audio_recorded = recorded_audio
        st.success("✅ Recording captured successfully!")

    # Sample audio for quick demo
    if st.button("🧩 Use Sample Demo Audio"):
        st.session_state.audio_recorded = None
        st.session_state.sample_demo_audio = True
        st.success("Sample demo selected — use Demo Mode to skip heavy steps")
    
    st.markdown("</div>", unsafe_allow_html=True)

with right:
    st.markdown("<div class='stCard'>", unsafe_allow_html=True)
    st.subheader("📝 Analysis Controls")
    st.caption("Configure and run your voice analysis.")
    
    # Quick note input
    session_note = st.text_input("Session Notes (optional)", placeholder="Add context about your recording...", key="note")
    
    # Face analysis toggle
    if 'face_analysis_enabled' not in st.session_state:
        st.session_state.face_analysis_enabled = False
    
    st.session_state.face_analysis_enabled = st.checkbox(
        "🎭 Enable Face Analysis", 
        value=st.session_state.face_analysis_enabled,
        help="Enable real-time face emotion and movement analysis"
    )
    
    # Performance tracking display
    if enable_comparison_mode and st.session_state.analysis_count > 0:
        st.markdown("**📈 Your Progress**")
        metric_col1, metric_col2 = st.columns(2)
        with metric_col1:
            st.metric("🏆 Best Score", f"{st.session_state.best_score:.1f}%")
        with metric_col2:
            st.metric("📊 Sessions", str(st.session_state.analysis_count))
    
    # Analysis button
    analysis_ready = st.session_state.audio_recorded is not None or audio_file is not None
    
    if not analysis_ready:
        st.info("📤 Please record or upload audio to begin analysis")
    
    st.markdown("</div>", unsafe_allow_html=True)

# ------------------- AUDIO PROCESSING -------------------
# Use recorded audio when available
audio_data = None
audio_duration = 0

# Initialize audio source
if st.session_state.audio_recorded is not None:
    audio_data = st.session_state.audio_recorded
    audio_duration = len(audio_data) / 1000
    st.success("✅ Recording ready for analysis!")
elif audio_file is not None and AudioSegment is not None:
    try:
        audio_data = AudioSegment.from_file(audio_file)
        audio_duration = len(audio_data) / 1000
        st.success("✅ Audio uploaded successfully!")
    except Exception as e:
        st.error(f"⚠️ Error loading audio file: {str(e)}")
        audio_data = None
elif audio_file is not None and AudioSegment is None:
    st.warning("pydub not available — cannot decode uploaded audio here. Use recorder or Demo Mode.")

# ------------------- MAIN ANALYSIS SECTION -------------------
if (demo_mode or st.session_state.get('sample_demo_audio')) or (audio_data and analysis_ready):
    # Primary action: Run full analysis
    button_text = "🚀 Run Complete Analysis"
    if st.session_state.face_analysis_enabled:
        button_text = "🚀 Run Complete Analysis with Face Analysis"
    
    if st.button(button_text, key="btn_analyze", type="primary"):
        
        try:
            # Show audio player
            st.markdown("<div class='stCard'>", unsafe_allow_html=True)
            st.subheader("🎧 Audio Preview")
            
            # Audio duration validation
            if audio_duration < 0.5:
                st.warning("⚠️ Audio is very short. Consider recording a longer sample for better analysis.")
            elif audio_duration > 300:  # 5 minutes
                st.warning("⚠️ Audio is quite long. Processing may take extra time.")
            
            if audio_data is not None and AudioSegment is not None and hasattr(audio_data, 'export'):
                buf = io.BytesIO()
                audio_data.export(buf, format="wav")
                st.audio(buf.getvalue(), format="audio/wav")
                st.caption(f"🕰 Duration: {audio_duration:.1f} seconds")
            st.markdown("</div>", unsafe_allow_html=True)
        
            # TRANSCRIPTION with enhanced progress tracking
            st.markdown("<div class='stCard'>", unsafe_allow_html=True)
            st.subheader("📝 Transcription Processing")
            
            # Show custom loader with progress
            progress_container = st.container()
            
            with progress_container:
                placeholder = st.empty()
                progress_bar = st.progress(0)
                
                # Step 1: Preparing
                placeholder.markdown("🗣 Preparing transcription...")
                progress_bar.progress(10)
                show_loader(0.8)
                
                # Step 2: Processing audio
                placeholder.markdown("🎤 Processing audio file...")
                progress_bar.progress(30)
                
                # Export audio to secure temp file with privacy protection
                temp_file_path, file_id = None, None
                buf = None
                if not demo_mode and audio_data is not None and AudioSegment is not None and hasattr(audio_data, 'export'):
                    buf = io.BytesIO()
                    audio_data.export(buf, format="wav")
                    buf.seek(0)
                    if PRIVACY_PROTECTION_AVAILABLE:
                        temp_audio_segment = AudioSegment.from_file(buf, format="wav")
                        temp_file_path, file_id = secure_audio_processor.process_audio_securely(
                            temp_audio_segment, "wav"
                        )
                        st.caption("🔒 Audio processed with privacy protection")
                    else:
                        temp_file_path = f"temp_audio_{int(time.time())}.wav"
                        with open(temp_file_path, "wb") as f:
                            f.write(buf.getbuffer())
                
                # Step 3: Transcribing
                placeholder.markdown("🤖 Running AI transcription...")
                progress_bar.progress(60)
                
                # Actual transcription (demo uses mock)
                start_time = st.session_state.perf_monitor.track_analysis_start()
                if demo_mode or st.session_state.get('sample_demo_audio'):
                    text = "Hello judges! This AI Coach analyzes clarity, fluency, confidence, and engagement, then gives actionable tips."
                    time.sleep(0.6)
                else:
                    text = transcribe_audio(temp_file_path)
                transcription_time = st.session_state.perf_monitor.track_analysis_end(start_time)
                
                progress_bar.progress(90)
                
                # Secure cleanup of temp file with privacy protection
                if not demo_mode and PRIVACY_PROTECTION_AVAILABLE and file_id:
                    # Use secure audio cleanup
                    secure_audio_processor.cleanup_audio_file(file_id)
                    st.caption("✅ Audio data securely deleted")
                elif not demo_mode and temp_file_path:
                    # Fallback cleanup
                    try:
                        os.remove(temp_file_path)
                    except:
                        pass
                
                # Step 4: Validation
                placeholder.markdown("✅ Validating results...")
                progress_bar.progress(100)
                time.sleep(0.5)
                
                # Clear progress indicators
                placeholder.empty()
                progress_bar.empty()
        
            # Handle transcription errors with detailed feedback
            if not (demo_mode or st.session_state.get('sample_demo_audio')) and text.startswith(("Audio file", "Empty audio", "Audio too short", "Audio loading error", "Transcription error", "No speech detected")):
                st.error(f"⚠️ Transcription Issue: {text}")
                
                # Provide specific troubleshooting based on error type
                if "too short" in text.lower():
                    st.info("💡 **Solution**: Record for at least 1-2 seconds with clear speech.")
                elif "loading error" in text.lower():
                    st.info("💡 **Solution**: Try a different audio format (WAV, MP3) or re-record.")
                elif "no speech" in text.lower():
                    st.info("💡 **Solution**: Ensure microphone is working and speak clearly.")
                else:
                    st.info("💡 **General Solutions**: Check microphone, reduce background noise, speak clearly.")
                
                st.markdown("</div>", unsafe_allow_html=True)
                st.stop()
            
            # Show transcription performance metrics
            st.success(f"✅ Transcription completed in {transcription_time:.2f} seconds!")
            
            # Ensure text is properly formatted
            if isinstance(text, list):
                text = ' '.join(str(item) for item in text if item)
            elif not isinstance(text, str):
                text = str(text) if text else ''
            
            # Text quality validation
            word_count = len(text.split()) if text else 0
            char_count = len(text) if text else 0
            
            if word_count == 0:
                st.warning("⚠️ No words detected in transcription. Audio may be inaudible.")
                st.markdown("</div>", unsafe_allow_html=True)
                st.stop()
        
            # Display transcription results with metrics
            st.markdown("<div class='stCard'>", unsafe_allow_html=True)
            st.subheader("📝 Transcription Results")
            
            # Text statistics
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("📊 Words", word_count)
            with col2:
                st.metric("🔤 Characters", char_count)
            with col3:
                st.metric("⏱ Speed", f"{transcription_time:.1f}s")
            
            # Display transcription with formatting
            st.markdown("**Transcribed Text:**")
            st.text_area("Transcribed Speech", text, height=100, disabled=True, label_visibility="hidden")
            st.markdown("</div>", unsafe_allow_html=True)
            
            # WPM CALCULATION
            wpm = calculate_wpm(text, audio_duration)
            wpm_feedback = categorize_wpm(wpm)
            
            st.markdown("<div class='stCard'>", unsafe_allow_html=True)
            st.subheader("🗣 Speaking Pace Analysis")
            
            pace_col1, pace_col2 = st.columns([1, 2])
            with pace_col1:
                st.metric("🗣 Words Per Minute", f"{wpm}")
            with pace_col2:
                if wpm < 100:
                    st.warning(wpm_feedback)
                elif 100 <= wpm <= 160:
                    st.success(wpm_feedback)
                else:
                    st.error(wpm_feedback)
            st.markdown("</div>", unsafe_allow_html=True)
            
            # FACE ANALYSIS SECTION (if enabled)
            if st.session_state.face_analysis_enabled:
                st.markdown("<div class='stCard'>", unsafe_allow_html=True)
                st.subheader("🎭 Face Analysis Results")
                st.info("Face analysis would run in real-time during a live presentation. In this demo mode, we're showing sample data.")
                
                # Sample face analysis data
                face_col1, face_col2, face_col3, face_col4 = st.columns(4)
                with face_col1:
                    st.metric("😊 Dominant Emotion", "Happy")
                with face_col2:
                    st.metric("🎯 Confidence", "85%")
                with face_col3:
                    st.metric("🏃 Movement Level", "Moderate")
                with face_col4:
                    st.metric("🌟 Engagement", "High")
                
                st.markdown("**Face Analysis Insights:**")
                st.markdown("• 😊 **Positive Expression**: Your expressions create strong audience connection")
                st.markdown("• 👌 **Optimal Movement**: Perfect balance of gestures for professional presentations")
                st.markdown("• 🎯 **High Engagement**: Strong eye contact and expressive gestures")
                st.markdown("• 🌟 **Confident Delivery**: Consistent positive expressions throughout")
                
                st.markdown("</div>", unsafe_allow_html=True)
            
            # ADVANCED TEXT ANALYSIS
            st.markdown("<div class='stCard'>", unsafe_allow_html=True)
            st.subheader("🔍 Advanced Analysis")
            
            analysis_progress = st.progress(0)
            analysis_status = st.empty()
            
            # Step-by-step analysis with progress
            analysis_status.markdown("🧠 Analyzing speech patterns...")
            analysis_progress.progress(25)
            time.sleep(0.3)
            
            analysis_status.markdown("📊 Generating performance metrics...")
            analysis_progress.progress(50)
            
            # Run analysis with performance tracking
            analysis_start = st.session_state.perf_monitor.track_analysis_start()
            results = analyze_text(text)
            analysis_time = st.session_state.perf_monitor.track_analysis_end(analysis_start)
            
            # Memory optimization: Update metrics
            st.session_state.perf_monitor.metrics['cache_hits'] += 1  # Assume cache hit for text analysis
            
            analysis_progress.progress(75)
            analysis_status.markdown("🏆 Calculating overall performance...")
            
            scores = results["Scores"]
            feedback = results["Feedback"]
            wpm_scaled = min(max(wpm, 0), 200) / 2
            scores["WPM"] = wpm_scaled
            
            overall_score = round(sum(scores.values()) / len(scores), 1)
            emoji = performance_emoji(overall_score)
            
            analysis_progress.progress(100)
            time.sleep(0.5)
            
            # Save performance data for tracking
            if enable_comparison_mode:
                save_performance_data(scores, overall_score, focus_area, analysis_time)
            
            # Clear progress indicators
            analysis_progress.empty()
            analysis_status.empty()
            
            st.success(f"✅ Analysis completed in {analysis_time:.2f} seconds!")
            
            # Show improvement over time if tracking enabled
            if enable_comparison_mode and len(st.session_state.performance_history) > 1:
                recent_scores = [entry["overall_score"] for entry in st.session_state.performance_history[-3:]]
                if len(recent_scores) >= 2:
                    improvement = recent_scores[-1] - recent_scores[-2]
                    if improvement > 0:
                        st.success(f"📈 Improved by +{improvement:.1f}% since last session!")
                    elif improvement < 0:
                        st.info(f"📉 Score decreased by {abs(improvement):.1f}% - keep practicing!")
                    else:
                        st.info("📏 Consistent performance - try focusing on specific areas for improvement.")
            st.markdown("</div>", unsafe_allow_html=True)
            
            # OVERALL PERFORMANCE CARD
            st.markdown("<div class='stCard'>", unsafe_allow_html=True)
            st.subheader(f"🌟 Overall Performance: {overall_score}/100 {emoji}")
            
            # Performance summary
            perf_col1, perf_col2, perf_col3 = st.columns(3)
            with perf_col1:
                st.metric("🏆 Overall Score", f"{overall_score}%")
            with perf_col2:
                st.metric("🗣 Speaking Rate", f"{wpm} WPM")
            with perf_col3:
                st.metric("⏱ Analysis Time", f"{analysis_time:.1f}s")
            
            # Performance dashboard with color coding
            st.markdown("**Detailed Metrics:**")
            
            # Group metrics for better organization
            delivery_metrics = ["Clarity", "Fluency", "Pace", "Energy"]
            content_metrics = ["Vocabulary", "Grammar", "Coherence", "Variety"]
            impact_metrics = ["Confidence", "Engagement", "Authenticity", "Persuasiveness"]
            
            # Create organized metric display
            metric_col1, metric_col2, metric_col3 = st.columns(3)
            
            with metric_col1:
                st.markdown("**🎤 Delivery**")
                for metric in delivery_metrics:
                    if metric in scores:
                        value = scores[metric]
                        color = get_color(value)
                        st.markdown(f"""
                            <div style="margin-bottom:6px;">
                                <span style="font-weight:600;">{metric}:</span> {round(value)}/100
                                <div style="background:#f0f0f0; border-radius:8px; height:8px; width:100%; margin-top:2px;">
                                    <div style="width:{value}%; background:{color}; height:8px; border-radius:8px; transition: width 0.5s ease;"></div>
                                </div>
                            </div>
                        """, unsafe_allow_html=True)
            
            with metric_col2:
                st.markdown("**📝 Content**")
                for metric in content_metrics:
                    if metric in scores:
                        value = scores[metric]
                        color = get_color(value)
                        st.markdown(f"""
                            <div style="margin-bottom:6px;">
                                <span style="font-weight:600;">{metric}:</span> {round(value)}/100
                                <div style="background:#f0f0f0; border-radius:8px; height:8px; width:100%; margin-top:2px;">
                                    <div style="width:{value}%; background:{color}; height:8px; border-radius:8px; transition: width 0.5s ease;"></div>
                                </div>
                            </div>
                        """, unsafe_allow_html=True)
            
            with metric_col3:
                st.markdown("**💪 Impact**")
                for metric in impact_metrics:
                    if metric in scores:
                        value = scores[metric]
                        color = get_color(value)
                        st.markdown(f"""
                            <div style="margin-bottom:6px;">
                                <span style="font-weight:600;">{metric}:</span> {round(value)}/100
                                <div style="background:#f0f0f0; border-radius:8px; height:8px; width:100%; margin-top:2px;">
                                    <div style="width:{value}%; background:{color}; height:8px; border-radius:8px; transition: width 0.5s ease;"></div>
                                </div>
                            </div>
                        """, unsafe_allow_html=True)
            
            st.markdown("</div>", unsafe_allow_html=True)
            
            # RADAR CHART CARD - Performance Visualization
            st.markdown("<div class='stCard'>", unsafe_allow_html=True)
            st.subheader("🕸 Performance Radar")
            
            # Prepare radar chart data
            radar_metrics = list(scores.keys())
            radar_values = list(scores.values())
            radar_values += radar_values[:1]  # Close the radar
            radar_metrics += radar_metrics[:1]
            
            # Create enhanced radar chart
            fig = go.Figure()
            
            # Add the filled area
            fig.add_trace(go.Scatterpolar(
                r=radar_values,
                theta=radar_metrics,
                fill='toself',
                name='Performance',
                line=dict(color=accent_color, width=3),
                fillcolor=f'rgba({int(accent_color[1:3], 16)}, {int(accent_color[3:5], 16)}, {int(accent_color[5:7], 16)}, 0.25)'
            ))
            
            # Customize layout for better performance (following user preference)
            fig.update_layout(
                polar=dict(
                    radialaxis=dict(
                        visible=True,
                        range=[0, 100],
                        tickfont=dict(size=10),
                        gridcolor="rgba(0,0,0,0.1)"
                    ),
                    angularaxis=dict(
                        tickfont=dict(size=11),
                        gridcolor="rgba(0,0,0,0.1)",
                        linecolor="rgba(0,0,0,0.2)"
                    )
                ),
                showlegend=False,
                margin=dict(l=40, r=40, t=40, b=40),
                paper_bgcolor='rgba(0,0,0,0)',
                plot_bgcolor='rgba(0,0,0,0)'
            )
            
            st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})
            st.markdown("</div>", unsafe_allow_html=True)
            
            # DETAILED FEEDBACK CARD
            st.markdown("<div class='stCard'>", unsafe_allow_html=True)
            st.subheader("💬 AI-Powered Feedback")
            
            # Show feedback with enhanced styling
            for i, tip in enumerate(feedback, 1):
                st.markdown(f"**{i}.** {tip}")
            
            # Contextual suggestions based on focus area and scores
            if enable_comparison_mode and len(st.session_state.performance_history) > 1:
                contextual_suggestions = get_contextual_suggestions(focus_area, scores, text)
                if contextual_suggestions:
                    st.markdown("---")
                    st.markdown(f"**🎯 {focus_area} Specific Tips:**")
                    for suggestion in contextual_suggestions:
                        st.markdown(f"• {suggestion}")
            
            st.markdown("</div>", unsafe_allow_html=True)
            
            # EXPORT OPTIONS
            st.markdown("<div class='stCard'>", unsafe_allow_html=True)
            st.subheader("📤 Export Options")
            
            export_col1, export_col2, export_col3 = st.columns(3)
            
            with export_col1:
                if st.button("📄 Export PDF Report", help="Export detailed analysis as PDF"):
                    if REPORTLAB_AVAILABLE:
                        try:
                            pdf_buffer = generate_pdf_report(scores, feedback, overall_score, emoji, text, wpm)
                            st.download_button(
                                label="📥 Download PDF Report",
                                data=pdf_buffer,
                                file_name=f"ai_coach_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                                mime="application/pdf"
                            )
                        except Exception as e:
                            st.error(f"PDF export failed: {str(e)}")
                    else:
                        st.info("PDF export unavailable - ReportLab not installed")
            
# Privacy protection notice
if PRIVACY_PROTECTION_AVAILABLE:
    st.markdown(
        "🔒 **Privacy Protection Active**: All voice and face data is automatically deleted after analysis. "
        "See the [Privacy Dashboard](#privacy-protection-dashboard) for details."
    )
else:
    st.markdown(
        "⚠️ **Privacy Protection Unavailable**: Voice and face data may not be automatically deleted. "
        "Please be cautious with sensitive information."
    )

# Additional helper functions that were missing
def show_loader(duration=1.0):
    """Show animated loader for the specified duration"""
    loader_html = """
    <div class="ai-loader">
        <div class="dot"></div>
        <div class="dot"></div>
        <div class="dot"></div>
    </div>
    """
    loader_placeholder = st.empty()
    loader_placeholder.markdown(loader_html, unsafe_allow_html=True)
    time.sleep(duration)
    loader_placeholder.empty()

def calculate_wpm(text, duration_seconds):
    """Calculate words per minute"""
    if not text or duration_seconds <= 0:
        return 0
    word_count = len(text.split())
    minutes = duration_seconds / 60
    return round(word_count / minutes) if minutes > 0 else 0

def categorize_wpm(wpm):
    """Categorize speaking pace"""
    if wpm < 100:
        return "🐌 Speaking slowly - consider increasing pace"
    elif 100 <= wpm <= 160:
        return "👌 Optimal speaking pace - well done!"
    else:
        return "🏃 Speaking quickly - consider slowing down"

def performance_emoji(score):
    """Get emoji based on performance score"""
    if score >= 90:
        return "🏆"
    elif score >= 80:
        return "🥇"
    elif score >= 70:
        return "🥈"
    elif score >= 60:
        return "🥉"
    else:
        return "💪"

def get_color(value):
    """Get color based on value (0-100)"""
    if value >= 80:
        return "#10B981"  # green
    elif value >= 60:
        return "#F59E0B"  # amber
    else:
        return "#EF4444"  # red

def save_performance_data(scores, overall_score, focus_area, analysis_time):
    """Save performance data to session state for tracking"""
    st.session_state.performance_history.append({
        "timestamp": datetime.now().isoformat(),
        "scores": scores,
        "overall_score": overall_score,
        "focus_area": focus_area,
        "analysis_time": analysis_time
    })
    st.session_state.analysis_count += 1
    if overall_score > st.session_state.best_score:
        st.session_state.best_score = overall_score

def create_performance_chart(history):
    """Create performance trend chart"""
    try:
        if len(history) < 2:
            return None
            
        timestamps = [entry["timestamp"] for entry in history]
        scores = [entry["overall_score"] for entry in history]
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=timestamps,
            y=scores,
            mode='lines+markers',
            name='Performance',
            line=dict(color='#4F46E5', width=3),
            marker=dict(size=8)
        ))
        
        fig.update_layout(
            title="Performance Trend",
            xaxis_title="Time",
            yaxis_title="Score",
            showlegend=False,
            margin=dict(l=40, r=40, t=40, b=40),
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)'
        )
        
        return fig
    except Exception:
        return None

def get_contextual_suggestions(focus_area, scores, text):
    """Generate contextual suggestions based on focus area and scores"""
    suggestions = []
    
    # General suggestions based on low scores
    for category, score in scores.items():
        if score < 65:
            if category == "Clarity":
                suggestions.append("Focus on clear pronunciation and enunciation")
            elif category == "Fluency":
                suggestions.append("Practice smooth transitions between words and phrases")
            elif category == "Pace":
                suggestions.append("Work on maintaining a consistent speaking rate")
            elif category == "Vocabulary":
                suggestions.append("Expand your vocabulary with more descriptive words")
            elif category == "Grammar":
                suggestions.append("Review grammar rules and sentence structure")
            elif category == "Confidence":
                suggestions.append("Practice speaking with more conviction and authority")
            elif category == "Engagement":
                suggestions.append("Use more varied intonation and vocal dynamics")
    
    # Focus area specific suggestions
    if focus_area == "Public Speaking":
        suggestions.append("Practice projecting your voice and maintaining eye contact")
    elif focus_area == "Interview Preparation":
        suggestions.append("Work on concise, impactful responses to common questions")
    elif focus_area == "Leadership Communication":
        suggestions.append("Focus on commanding presence and persuasive language")
    
    return suggestions[:5]  # Return top 5 suggestions

def generate_pdf_report(scores, feedback, overall_score, emoji, text, wpm):
    """Generate PDF report using ReportLab"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []
    
    # Title
    title = Paragraph("AI Coach - Voice Analysis Report", styles['Title'])
    story.append(title)
    story.append(Spacer(1, 12))
    
    # Overall score
    score_text = f"Overall Score: {overall_score}/100 {emoji}"
    score_para = Paragraph(score_text, styles['Heading2'])
    story.append(score_para)
    story.append(Spacer(1, 12))
    
    # WPM
    wpm_text = f"Words Per Minute: {wpm}"
    wpm_para = Paragraph(wpm_text, styles['Normal'])
    story.append(wpm_para)
    story.append(Spacer(1, 12))
    
    # Scores table
    data = [["Category", "Score"]] + [[cat, f"{score:.1f}"] for cat, score in scores.items()]
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(table)
    story.append(Spacer(1, 12))
    
    # Feedback
    feedback_title = Paragraph("Feedback:", styles['Heading2'])
    story.append(feedback_title)
    for tip in feedback:
        tip_para = Paragraph(f"• {tip}", styles['Normal'])
        story.append(tip_para)
    story.append(Spacer(1, 12))
    
    # Transcription
    transcript_title = Paragraph("Transcription:", styles['Heading2'])
    story.append(transcript_title)
    transcript_para = Paragraph(text, styles['Normal'])
    story.append(transcript_para)
    
    doc.build(story)
    buffer.seek(0)
    return buffer

# ---------------------------
# FOOTER
# ---------------------------
st.markdown("---")
st.markdown(
    f"🌈 **8 Professional Themes** | 🎨 **Custom Accent Colors** | ✨ **Performance-Optimized Animations** | "
    f"📷 **Face Emotion Analysis** | 📈 **Performance Tracking** | 🎯 **Context-Specific Coaching** | "
    f"⚡ **Real-time Feedback** | 📊 **Advanced Analytics** | **Current: {theme}**"
)

# Initialize face analysis session state if not already present
if 'face_analysis_enabled' not in st.session_state:
    st.session_state.face_analysis_enabled = False
